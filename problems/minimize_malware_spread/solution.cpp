class DSU {
    vector<int> rank, parent, size;
public:
    DSU(int n) {
        rank.resize(n, 0);
        parent.resize(n);
        size.resize(n);
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    int findUPar(int node) {
        if (node == parent[node])
            return node;
        return parent[node] = findUPar(parent[node]);
    }

    int getSize(int node) {
        return size[findUPar(node)];
    }

    int getMaxSize() {
        int ans = 0;
        for(auto i: size) {
            ans = max(i, ans);
        }

        return ans;
    }

    void unionByRank(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (rank[ulp_u] < rank[ulp_v]) {
            parent[ulp_u] = ulp_v;
        }
        else if (rank[ulp_v] < rank[ulp_u]) {
            parent[ulp_v] = ulp_u;
        }
        else {
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }

    void unionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (size[ulp_u] < size[ulp_v]) {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        auto dsu = DSU(n);

        for(int i=0; i<n; i++) {
            for(int j=0; j<n; j++) {
                if(i != j and graph[i][j] == 1) {
                    dsu.unionBySize(i, j);
                }
            }
        }

        sort(initial.begin(), initial.end());

        vector<int> popu(n, 0);
        vector<int> infected(n, 0);

        for(auto i: initial) {
            infected[dsu.findUPar(i)]++;
        }

        for(int i=0; i<n; i++) {
            popu[dsu.findUPar(i)]++;
        }

        int ans = initial[0];
        int maxP = 0;


        for(auto i: initial) {
            int up = dsu.findUPar(i);
            if(infected[up] == 1 and popu[up] > maxP) {
                maxP = popu[up];
                ans = i;
            }
        }

        return ans;
    }
};